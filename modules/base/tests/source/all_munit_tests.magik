#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug,topic=MUnit)
def_slotted_exemplar(:all_munit_tests,
{},
{:test_setup})
$

_pragma(classify_level=debug,topic=MUnit)
_method all_munit_tests.set_up()
	## 

	a_suite << test_suite.new( _unset , "All MUnit Tests" )

	a_suite.add_test_suite( assert_test )
	a_suite.add_test_suite( assert_raised_condition_test )
	a_suite.add_test_suite( test_case_test )
	a_suite.add_test_suite( suite_test )
	a_suite.add_test_suite( test_listener_test )
	a_suite.add_test_suite( test_implementor_test )
	a_suite.add_test_suite( test_interface_test )
	a_suite.add_test_suite( extension_test )
	a_suite.add_test_suite( repeated_test_test )
 	a_suite.add_test_suite( active_test_test )
	a_suite.add_test_suite( db_test_case_test )
	a_suite.add_test_suite( failure_test )
	
	.test << a_suite
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method all_munit_tests.tear_down()

	.test << _unset
	
	# ??? clean all local exemplars from image 
	system.gc()
	system.gc() 
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method all_munit_tests.count_test_cases()
	## 

	_if .test _is _unset
	_then
		_self.set_up()
	_endif 

	>> _super.count_test_cases()
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_iter _method all_munit_tests.tests()
	##

	_if .test _is _unset
	_then
		_self.set_up()
	_endif 

	_for t _over _self.get_test().tests()
	_loop
		_loopbody( t )
	_endloop 
_endmethod
$


