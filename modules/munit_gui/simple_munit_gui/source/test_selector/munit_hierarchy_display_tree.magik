def_slotted_exemplar( :munit_hierarchy_display_tree, {}, :display_tree )
$

_method munit_hierarchy_display_tree.status()
	_local status << :not_run
	_for a_child _over _self.children()
	_loop
		_local child_status << a_child.status()
		status << _if status _is :not_run _then >> child_status
			  _elif status _is :success _andif child_status _isnt :not_run _then >> child_status
			  _elif status _is :failed _andif child_status _is :error _then >> child_status
			  _else >> status _endif
	_endloop
	_return status
_endmethod
$

_pragma(classify_level=basic, topic={MUnit})
_method munit_hierarchy_display_tree.styled_string
	_local status << _self.status()
	>> styled_string.new_from(
		   {:image, _self.icon( status ), 
		    _self.colour( status ),
		    _self.display_text } )
_endmethod
$

_method munit_hierarchy_display_tree.colour( status )
	>> _if status _is :success _then >> :green
	   _elif status _is :error _then >> :red
	   _elif status _is :failed _then >> :orange
	   _else >> _self.not_run_colour() _endif
_endmethod
$

_method munit_hierarchy_display_tree.not_run_colour()
	_return :black
_endmethod
$

_method munit_hierarchy_display_tree.icon( status )
	>> _if status _is :success _then >> { :ok, _self.module_name }
	   _elif status _is :error _then >> { :error, _self.module_name }
	   _elif status _is :failed _then >> { :failure, _self.module_name }
	   _else >> _self.not_run_icon() _endif
_endmethod
$


_pragma(classify_level=debug, topic={MUnit})
_method munit_hierarchy_display_tree.tests()
	result << rope.new()
	_for a_child _over _self.children.fast_elements()
	_loop 
		result.add_all_last( a_child.tests() )
	_endloop
	_return result 
_endmethod
$

_pragma(classify_level=debug, topic={MUnit})
_method munit_hierarchy_display_tree.modules()
	result << set.new()
	_for a_child _over _self.children.fast_elements()
	_loop 
		result.add_all( a_child.modules() )
	_endloop
	
	_return result  
_endmethod
$
