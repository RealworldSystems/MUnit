#% text_encoding = iso8859_1
_package sw 
$

remex(:mmock_stub)
$

def_slotted_exemplar(:mmock_stub,
	{{:object,            _unset},
	 {:current_behaviour, _unset}
	},
	{})
$

_method mmock_stub.new(obj)
	>> _clone.init(obj)
_endmethod
$

_method mmock_stub.init(obj)
	.object << obj
	>> _self 
_endmethod
$

_method mmock_stub.does_not_understand(msg, private?)
	
	_if _self _is mmock_stub # Avoid cockups with the exemplar
	_then
		condition.raise(:does_not_understand,
			:object, _self,
			:selector, msg.selector,
			:arguments, msg.args,
			:iterator?, _false,
			:private?, private?)
	_endif

	_if .current_behaviour _isnt _unset
	_then
		msg << write_string("API is stub(obj).method_to_stub.then_return(). You seem to have called stub(obj).method_to_stub.", msg.selector)
		condition.raise(:mmock!stub_error, :string, msg)
	_endif
	

	default_type         << :returns
	default_return_value << {_unset}
	.current_behaviour << {msg.selector, msg.args, default_type, default_return_value}
#
#	.object.mmock!add_behaviour(msg.selector, .current_behaviour)
#
#	.object.mmock!ensure_has_method(msg)
	_self.install_mock()
	_return _self
_endmethod
$

_method mmock_stub.then_return(_gather values)
	_if .current_behaviour _is _unset
	_then
		condition.raise(:mmock!stub_error,
				:string, "API is stub(obj).method_to_stub.then_return(). You seem to have called stub(obj).then_return()")
	_endif

	.current_behaviour[3] << :returns
	.current_behaviour[4] << values
	_self.install_mock()
_endmethod
$

_method mmock_stub.then_raise(condition, _gather keys_and_values)
	_if .current_behaviour _is _unset
	_then
		condition.raise(:mmock!stub_error,
				:string, "API is stub(obj).method_to_stub.then_raise(). You seem to have called stub(obj).then_raise()")
	_endif

	.current_behaviour[3] << :raises
	.current_behaviour[4] << {condition, _scatter keys_and_values}
	_self.install_mock()
_endmethod
$

_method mmock_stub.install_mock()
	_local last_args << { .current_behaviour[3], _scatter .current_behaviour[4] }
		
	_local mock_parts << rope.new()
	_if _not .current_behaviour[2].empty?
	_then
		_for an_arg _over .current_behaviour[2].fast_elements()
		_loop
			mock_parts.add_all_last( { _if an_arg.is_kind_of?(match)
					      _then >> :with_wildcard _else >> :with_arg _endif,
					      an_arg } )
		_endloop
	_endif
	mock_parts.add_all_last( last_args )
	
	mock_manager.install_mock( .object, .current_behaviour[1],
				   _scatter mock_parts )
_endmethod
$
